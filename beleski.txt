// Kajgana e star nacin
// Single page e React

// Gledame primer

//Scripta sto ke ja pravi cela webpack by running create-react-app

//Json
scripts: react and reactDOM, se biblioteki sto se konfiguriraat so create-react-app, ne treba racno da gi siminjame;
react-scripts vika ne treba nisto da se zamaras, eve ti gi vo pozadina
//Npm run eject za da vidis sto ima u skriptite, ama nema vrakjanje, kao da ja brises

//SPA e deka ke imaat eden HTML fajl, tolku. Se se slucuva so JS. React kako bibilioteka go sledi principot na component based biblioteki.
root div: 
//manifest json: progressive web apps, da pojdeme na web strana a da go imame iskustvoto na mobilna web applikacija. Sto ima vo mobilna app, a ne vo WEB?

// Src
serviceWorker e isto sto i manifest

svg

//Index.js
Entry point;
...
ReactDOM (kako nasata app startuva):
    root div, tuka se importira/renderira nasata startna komponenta (koja komponenta, kade)
Komponenta vo react e isto sto i funkcija, so taa razlika sto taa funckija mora da vrakja html i css;
JSX koga e citan od transpiler kako Babilon, se pretvora vo JS. = return React.createElement("div", null, "Pogodivme")
React advantage over Angular, e deka koristi virtual DOM;
Sto e razlikata ejs i jsx?
I na kraj eksport. sto ke vleze vo entry point?

// Uste edno nesto (HUKS)

// Sto e kako funkcija u JS? Classa e toa; JS prototype; Komponenta moze da se napravi i so klasa, a razlikata e toa sto mozeme da napravime dva vida komponenti, functional i class (dumb i smart[zaradi toa sto ovie moze da imaat i state[sostojbata na komponentata dodeka nesto mi e prikazano ], plus lifecycle metodi]);


// Extends, nasleduvanje

// Ajde da napraime aplikacij